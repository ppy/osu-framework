on: [push, pull_request]
name: Continuous Integration

jobs:
  inspect-code:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install .NET 6.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Restore Tools
        run: dotnet tool restore

      - name: Restore Packages
        run: dotnet restore osu-framework.Desktop.slnf

      - name: Restore inspectcode cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/inspectcode
          key: inspectcode-${{ hashFiles('.config/dotnet-tools.json', '.github/workflows/ci.yml', 'osu-framework.sln*', 'osu-framework*.slnf', '.editorconfig', '.globalconfig', 'CodeAnalysis/*', '**/*.csproj', '**/*.props') }}

      - name: Dotnet code style
        run: dotnet build -c Debug -warnaserror osu-framework.Desktop.slnf -p:EnforceCodeStyleInBuild=true

      - name: CodeFileSanity
        run: |
          # TODO: Add ignore filters and GitHub Workflow Command Reporting in CFS. That way we don't have to do this workaround.
          # FIXME: Suppress warnings from templates project
          exit_code=0
          while read -r line; do
            if [[ ! -z "$line" && "$line" != *"/osu.Framework.Templates/"* ]]; then
              echo "::error::$line"
              exit_code=1
            fi
          done <<< $(dotnet codefilesanity)
          exit $exit_code

      - name: InspectCode
        run: dotnet jb inspectcode $(pwd)/osu-framework.Desktop.slnf --no-build --output="inspectcodereport.xml" --caches-home="inspectcode" --verbosity=WARN

      - name: NVika
        run: dotnet nvika parsereport "${{github.workspace}}/inspectcodereport.xml" --treatwarningsaserrors

  test:
    name: Test
    runs-on: ${{matrix.os.fullname}}
    env:
      OSU_EXECUTION_MODE: ${{matrix.threadingMode}}
      OSU_TESTS_LOCAL_HTTPBIN: 1
    strategy:
       fail-fast: false
       matrix:
          os:
            - { prettyname: Windows, fullname: windows-latest }
            - { prettyname: macOS, fullname: macos-latest }
            - { prettyname: Linux, fullname: ubuntu-latest }
          threadingMode: ['SingleThread', 'MultiThreaded']
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install .NET 6.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Setup Go
        uses: actions/setup-go@v3

      - name: Install httpbin
        run: go install github.com/mccutchen/go-httpbin/v2/cmd/go-httpbin@latest

      - name: Run httpbin
        run: $HOME/go/bin/go-httpbin &
        shell: bash

      - name: Compile
        run: dotnet build -c Debug -warnaserror osu-framework.Desktop.slnf

      - name: Test
        run: dotnet test $pwd/**/*.Tests/bin/Debug/*/*.Tests.dll --settings $pwd/build/vstestconfig.runsettings --logger "trx;LogFileName=TestResults-${{matrix.os.prettyname}}-${{matrix.threadingMode}}.trx"
        shell: pwsh

      # Attempt to upload results even if test fails.
      # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#always
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: osu-framework-test-results-${{matrix.os.prettyname}}-${{matrix.threadingMode}}
          path: ${{github.workspace}}/TestResults/TestResults-${{matrix.os.prettyname}}-${{matrix.threadingMode}}.trx

  build-only-android:
    name: Build only (Android)
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install .NET 6.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Restore .NET workloads
        run: dotnet workload restore

      - name: Compile
        run: dotnet build -c Debug osu-framework.Android.slnf

  build-only-ios:
    name: Build only (iOS)
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install .NET 6.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Restore .NET workloads
        # `dotnet workload restore` is bugged in .NET 7.0.101+ when restoring iOS projects,
        # see https://github.com/xamarin/xamarin-macios/issues/16400.
        run: dotnet workload install ios

      - name: Compile
        run: dotnet build -c Debug osu-framework.iOS.slnf
