#nullable enable

using System;
using System.Threading.Tasks;
using osu.Framework.Allocation;

namespace osu.Framework.Utils
{
    public static class SourceGeneratorUtils
    {
        public static void CacheDependency(DependencyContainer container, Type callerType, object? obj, CacheInfo info, Type? asType, string? cachedName, string? propertyName)
        {
        }

        public static T GetDependency<T>(IReadOnlyDependencyContainer container, Type callerType, string? cachedName, Type? cachedParent, bool allowNulls, bool rebindBindables)
        {
            return default;
        }

        public static IBackgroundDependencyLoaderContext CreateBackgroundDependencyLoaderContext() => new BackgroundDependencyLoaderSynchronizationContext();

        public interface IBackgroundDependencyLoaderContext
        {
            IBackgroundDependencyLoaderContext WaitFor(Task? task);
            void Release();
        }

        private class BackgroundDependencyLoaderSynchronizationContext : IBackgroundDependencyLoaderContext
        {
            public IBackgroundDependencyLoaderContext WaitFor(Task? task)
            {
                return this;
            }

            public void Release()
            {
            }
        }
    }
}

#nullable disable