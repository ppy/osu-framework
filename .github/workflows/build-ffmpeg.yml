name: Build FFmpeg
on: workflow_dispatch

jobs:
  build-macos:
    name: Build macOS
    runs-on: macos-12
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ilammy/setup-nasm@v1

      - name: Build
        run: osu.Framework.NativeLibs/scripts/ffmpeg/build-macOS.sh
        env:
          arch: ${{ matrix.arch }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: macOS-${{ matrix.arch }}
          path: macOS-${{ matrix.arch }}

  combine-macos:
    name: Combine macOS libs
    runs-on: macos-12
    needs: build-macos
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: macOS-x86_64
          path: macOS-x86_64
      - uses: actions/download-artifact@v4
        with:
          name: macOS-arm64
          path: macOS-arm64

      - name: Combine
        run: osu.Framework.NativeLibs/scripts/ffmpeg/combine_dylibs.sh
        env:
          platform: macOS

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: macOS-universal
          path: macOS-universal

  build-iOS:
    name: Build iOS
    runs-on: macos-12
    strategy:
      matrix:
        arch: [arm64, simulator-arm64, simulator-x86_64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ilammy/setup-nasm@v1
        if: matrix.arch == 'simulator-x86_64'

      - name: Setup gas-preprocessor
        run: |
          git clone --depth=1 https://github.com/FFmpeg/gas-preprocessor
          echo "GAS_PREPROCESSOR=$PWD/gas-preprocessor/gas-preprocessor.pl" >> $GITHUB_ENV

      - name: Build
        run: osu.Framework.NativeLibs/scripts/ffmpeg/build-iOS.sh
        env:
          arch: ${{ matrix.arch }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: iOS-${{ matrix.arch }}
          path: iOS-${{ matrix.arch }}

  combine-iOS:
    name: Combine iOS libs
    runs-on: macos-12
    needs: build-iOS
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: iOS-simulator-x86_64
          path: iOS-simulator-x86_64
      - uses: actions/download-artifact@v4
        with:
          name: iOS-simulator-arm64
          path: iOS-simulator-arm64
      - uses: actions/download-artifact@v4
        with:
          name: iOS-arm64
          path: iOS-arm64

      - name: Combine dylibs
        run: osu.Framework.NativeLibs/scripts/ffmpeg/combine_dylibs.sh
        env:
          platform: iOS-simulator

      - name: Create XCFrameworks
        run: osu.Framework.NativeLibs/scripts/ffmpeg/create-xcframeworks.sh

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: iOS-xcframework
          path: iOS-xcframework

  build-win:
    name: Build Windows
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86
          - x64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install nasm mingw-w64

      - name: Build
        run: osu.Framework.NativeLibs/scripts/ffmpeg/build-win.sh
        env:
          arch: ${{ matrix.arch }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: win-${{ matrix.arch }}
          path: win-${{ matrix.arch }}

  # The win-arm64 build runs in a special MinGW container to cross-compile successfully.
  build-win-arm64:
    name: Build Windows (arm64)
    runs-on: ubuntu-22.04
    container:
      image: mstorsjo/llvm-mingw:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        run: osu.Framework.NativeLibs/scripts/ffmpeg/build-win.sh
        env:
          arch: arm64

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: win-arm64
          path: win-arm64

  build-linux:
    name: Build Linux (x64)
    # Use 20.04 to target glibc 2.31 like the other native libs
    runs-on: ubuntu-20.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install nasm

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        run: osu.Framework.NativeLibs/scripts/ffmpeg/build-linux.sh

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: linux-x64

  build-android:
    name: Build Android
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch:
          - armeabi-v7a
          - arm64-v8a
          - x86
          - x86_64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        run: osu.Framework.NativeLibs/scripts/ffmpeg/build-android.sh
        env:
          arch: ${{ matrix.arch }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.arch }}
          path: android-${{ matrix.arch }}

  make-pr:
    name: Create pull request
    runs-on: ubuntu-22.04
    needs:
      - combine-macos
      - combine-iOS
      - build-win
      - build-win-arm64
      - build-linux
      - build-android
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: macOS-universal
          path: osu.Framework.NativeLibs/runtimes/osx/native
      - uses: actions/download-artifact@v4
        with:
          name: iOS-xcframework
          path: osu.Framework.iOS/runtimes/ios/native
      - uses: actions/download-artifact@v4
        with:
          name: linux-x64
          path: osu.Framework.NativeLibs/runtimes/linux-x64/native
      - uses: actions/download-artifact@v4
        with:
          name: win-arm64
          path: osu.Framework.NativeLibs/runtimes/win-arm64/native
      - uses: actions/download-artifact@v4
        with:
          name: win-x64
          path: osu.Framework.NativeLibs/runtimes/win-x64/native
      - uses: actions/download-artifact@v4
        with:
          name: win-x86
          path: osu.Framework.NativeLibs/runtimes/win-x86/native
      - uses: actions/download-artifact@v4
        with:
          name: android-armeabi-v7a
          path: osu.Framework.Android/armeabi-v7a
      - uses: actions/download-artifact@v4
        with:
          name: android-arm64-v8a
          path: osu.Framework.Android/arm64-v8a
      - uses: actions/download-artifact@v4
        with:
          name: android-x86
          path: osu.Framework.Android/x86
      - uses: actions/download-artifact@v4
        with:
          name: android-x86_64
          path: osu.Framework.Android/x86_64

      - uses: peter-evans/create-pull-request@v6
        with:
          commit-message: Update FFmpeg binaries
          title: Update FFmpeg binaries
          body: This PR has been auto-generated to update the FFmpeg binaries.
          branch: update-ffmpeg-binaries
          delete-branch: true
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
